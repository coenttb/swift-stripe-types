//
//  Refund.swift
//  Stripe
//
//  Created by Anthony Castelli on 4/15/17.
//
//

import Foundation
import Stripe_Types_Shared

// https://docs.stripe.com/api/refunds/object.md

/// The [Refund Object](https://stripe.com/docs/api/refunds/object) .
extension Stripe.Refunds {
    public struct Refund: Codable, Hashable, Sendable, Identifiable {
        public typealias ID = Tagged<Self, String>
        
        /// Unique identifier for the object.
        public var id: ID
        /// Amount, in cents.
        public var amount: Int?
        /// ID of the charge that was refunded.
        @ExpandableOf<Stripe.Charges.Charge> public var charge: Stripe.Charges.Charge.ID?
        /// Three-letter ISO currency code, in lowercase. Must be a supported currency.
        public var currency: Stripe.Currency?
        /// An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)
        public var description: String?
        /// Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        public var metadata: [String: String]?
        /// ID of the PaymentIntent that was refunded.
        @ExpandableOf<Stripe.PaymentIntents.PaymentIntent> public var paymentIntent: Stripe.PaymentIntents.PaymentIntent.ID?
        /// Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
        public var reason: Stripe.Refunds.Refund.Reason?
        /// Status of the refund. For credit card refunds, this can be `pending`, `succeeded`, or `failed`. For other types of refunds, it can be `pending`, `succeeded`, `failed`, or `canceled`. Refer to our refunds documentation for more details.
        public var status: Stripe.Refunds.Refund.Status?
        /// String representing the object’s type. Objects of the same type share the same value.
        public var object: String
        /// Balance transaction that describes the impact on your account balance.
        @ExpandableOf<Stripe.Balance.Transaction> public var balanceTransaction: Stripe.Balance.Transaction.ID?
        /// Time at which the object was created. Measured in seconds since the Unix epoch.
        public var created: Date
        /// If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction.
        @ExpandableOf<Stripe.Balance.Transaction> public var failureBalanceTransaction: Stripe.Balance.Transaction.ID?
        ///  the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, `charge_for_pending_refund_disputed`, `insufficient_funds`, `declined`, `merchant_request` or `unknown`.
        public var failureReason: Stripe.Refunds.Refund.FailureReason?
        /// For payment methods without native refund support (e.g., Konbini, PromptPay), email for the customer to receive refund instructions.
        public var instructionsEmail: String?
        /// If the refund has a status of `requires_action`, this property will describe what the refund needs in order to continue processing.
        public var nextAction: Stripe.Refunds.Refund.NextAction?
        /// This is the transaction number that appears on email receipts sent for this refund.
        public var receiptNumber: String?
        /// The transfer reversal that is associated with the refund. Only present if the charge came from another Stripe account. See the Connect documentation for details.
        @ExpandableOf<Stripe.Connect.Transfer.Reversal> public var sourceTransferReversal: Stripe.Connect.Transfer.Reversal.ID?
        /// If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter.
        @ExpandableOf<Stripe.Connect.Transfer.Reversal> public var transferReversal: Stripe.Connect.Transfer.Reversal.ID?
        
        public init(
            id: ID,
            amount: Int? = nil,
            charge: Stripe.Charges.Charge.ID? = nil,
            currency: Stripe.Currency? = nil,
            description: String? = nil,
            metadata: [String: String]? = nil,
            paymentIntent: Stripe.PaymentIntents.PaymentIntent.ID? = nil,
            reason: Stripe.Refunds.Refund.Reason? = nil,
            status: Stripe.Refunds.Refund.Status? = nil,
            object: String,
            balanceTransaction: Stripe.Balance.Transaction.ID? = nil,
            created: Date,
            failureBalanceTransaction: Stripe.Balance.Transaction.ID? = nil,
            failureReason: Stripe.Refunds.Refund.FailureReason? = nil,
            instructionsEmail: String? = nil,
            nextAction: Stripe.Refunds.Refund.NextAction? = nil,
            receiptNumber: String? = nil,
            sourceTransferReversal: Stripe.Connect.Transfer.Reversal.ID? = nil,
            transferReversal: Stripe.Connect.Transfer.Reversal.ID? = nil
        ) {
            self.id = id
            self.amount = amount
            self._charge = Expandable(id: charge)
            self.currency = currency
            self.description = description
            self.metadata = metadata
            self._paymentIntent = Expandable(id: paymentIntent)
            self.reason = reason
            self.status = status
            self.object = object
            self._balanceTransaction = Expandable(id: balanceTransaction)
            self.created = created
            self._failureBalanceTransaction = Expandable(id: failureBalanceTransaction)
            self.failureReason = failureReason
            self.instructionsEmail = instructionsEmail
            self.nextAction = nextAction
            self.receiptNumber = receiptNumber
            self._sourceTransferReversal = Expandable(id: sourceTransferReversal)
            self._transferReversal = Expandable(id: transferReversal)
        }
    }
    
}

extension Stripe.Refunds.Refund {
    public enum FailureReason: String, Codable, Sendable {
        case lostOrStolenCard = "lost_or_stolen_card"
        case expiredOrCanceledCard = "expired_or_canceled_card"
        case chargeForPendingRefundDisputed = "charge_for_pending_refund_disputed"
        case insufficientFunds = "insufficient_funds"
        case declined
        case merchantRequest = "merchant_request"
        case unknown
    }
    
    public enum Status: String, Codable, Sendable {
        case pending
        case succeeded
        case failed
        case canceled
    }
    
    public enum Reason: String, Codable, Sendable {
        case duplicate
        case fraudulent
        case requestedByCustomer = "requested_by_customer"
        case expiredUncapturedCharge = "expired_uncaptured_charge"
    }
    
    public struct NextAction: Codable, Hashable, Sendable {
        /// Contains the refund details.
        public var displayDetails: Stripe.Refunds.Refund.NextActionDisplayDetails?
        /// Type of the next action to perform.
        public var type: String?
        
        public init(
            displayDetails: Stripe.Refunds.Refund.NextActionDisplayDetails? = nil,
            type: String? = nil
        ) {
            self.displayDetails = displayDetails
            self.type = type
        }
    }
    
    public struct NextActionDisplayDetails: Codable, Hashable, Sendable {
        /// Contains information about the email sent to the customer.
        public var emailSent: Stripe.Refunds.Refund.NextActionDisplayDetailsEmailSent?
        /// The expiry timestamp.
        public var expiresAt: Date?
        
        public init(
            emailSent: Stripe.Refunds.Refund.NextActionDisplayDetailsEmailSent? = nil,
            expiresAt: Date? = nil
        ) {
            self.emailSent = emailSent
            self.expiresAt = expiresAt
        }
    }
    
    public struct NextActionDisplayDetailsEmailSent: Codable, Hashable, Sendable {
        /// The timestamp when the email was sent.
        public var emailSentAt: Date?
        /// The recipient’s email address.
        public var emailSentTo: String?
        
        public init(
            emailSentAt: Date? = nil,
            emailSentTo: String? = nil
        ) {
            self.emailSentAt = emailSentAt
            self.emailSentTo = emailSentTo
        }
    }
    
}

extension Stripe.Refunds.Refund {
    public struct List: Codable, Hashable, Sendable {
        public var object: String
        public var hasMore: Bool?
        public var url: String?
        public var data: [Stripe.Refunds.Refund]?
        
        public init(
            object: String,
            hasMore: Bool? = nil,
            url: String? = nil,
            data: [Stripe.Refunds.Refund]? = nil
        ) {
            self.object = object
            self.hasMore = hasMore
            self.url = url
            self.data = data
        }
    }
}

